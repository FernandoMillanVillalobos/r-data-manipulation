str2 <- c(" It was founded by the members", "of the R Core Team in order", "to provide support for the R project")
any(grep("profit", str1))
any(grep("profit", str2))
# using regexpr
tst <- c("one x7 two b1", "three c5 four b9", "five six seven", "a8 eight nine")
wh <- regexpr("[a-z][0-9]", tst)
wh
res <- substring(tst, wh, wh + attr(wh, "match.length") - 1)
res
# using gregexpr
wh1 <- gregexpr("[a-z][0-9]", tst)
wh1
res1 = list()
for (i in 1:length(wh1)) {
res1[[i]] <- substring(
tst[i], wh1[[i]],
wh1[[i]] +
attr(wh1[[i]], "match.length") - 1
)
}
res1
# substitutions
values <- c("$11,317.35", "$11,234.51", "$11,275.89", "$11,278.93", "$11,294.94")
as.numeric(gsub("[$,]", "", values))
# tagging
values <- c("75.99", "(20.30)", "55.20")
as.numeric(gsub("\\(([0-9.]+)\\)", "-\\1", values))
# extracting the tagged pattern
str <- "report: 17 value=12 time=2:00"
sub("value=([^ ]+)", "\\1", str)
sub("^.*value=([^ ]+).*$", "\\1", str)
# lintr::lint("main.Rmd", linters =
#               lintr::with_defaults(
#                 commented_code_linter = NULL,
#                 trailing_whitespace_linter = NULL
#                 )
#             )
# if you have additional scripts and want them to be linted too, add them here
# lintr::lint("scripts/my_script.R")
# finding the lengths of the names of the states of USA
nchar(state.name)
# using cat function
x = 7
y = 10
cat("x should be greater than y, but x=',x,' and y=',y,' x should be greater than y, but x = 7 and y = 10")
# with fill argument
cat("Long strings can", "be displayed over", "several lines using", "the fill= argument", fill = 40)
# using paste
paste("one", 2, "three", 4, "five")
paste(c("one", "two", "three", "four"), collapse = " ")
paste(c("X", "Y"), 1:5, sep = "")
paste(c("X", "Y"), 1:5, sep = "_", collapse = "|")
paste(c("X", "Y"), 1:5, sep = "_") # with space -> no collapse argument
# working with parts of character values
substring(state.name, 2, 6)
# finding location of particular characters
state <- "Mississippi"
ll <- nchar(state)
ltrs <- substring(state, 1:ll, 1:ll)
ltrs
which(ltrs == "s")
# regular expressions
expr <- ".*\\.txt"
nchar(expr)
cat(expr, "\n")
# breaking apart character values
sentence <- "R is a free software environment for statistical computing"
parts <- strsplit(sentence, " ")
parts
length(parts)
length(parts[[1]])
sapply(parts, length)
allparts <- unlist(parts)
allparts
str <- "one two three four"
strsplit(str, " +")
# using regex
grep("^pop", names(LifeCycleSavings)) # indices
grep("^pop", names(LifeCycleSavings), value = TRUE) # values
# creating a data frame using grep as a subscript
head(LifeCycleSavings[, grep("^pop", names(LifeCycleSavings))])
# ignoring upper or lower case
inp <- c("run dog run", "work doggedly", "CAT AND DOG")
grep("\\<dog\\>", inp, ignore.case = TRUE)
# checking if a regex occurs anywhere in text
str1 <- c("The R Foundation", "is a not for profit organization", "working in the public interest")
str2 <- c(" It was founded by the members", "of the R Core Team in order", "to provide support for the R project")
any(grep("profit", str1))
any(grep("profit", str2))
# using regexpr
tst <- c("one x7 two b1", "three c5 four b9", "five six seven", "a8 eight nine")
wh <- regexpr("[a-z][0-9]", tst)
wh
res <- substring(tst, wh, wh + attr(wh, "match.length") - 1)
res
# using gregexpr
wh1 <- gregexpr("[a-z][0-9]", tst)
wh1
res1 = list()
for (i in 1:length(wh1)) {
res1[[i]] <- substring(
tst[i], wh1[[i]],
wh1[[i]] +
attr(wh1[[i]], "match.length") - 1
)
}
res1
# substitutions
values <- c("$11,317.35", "$11,234.51", "$11,275.89", "$11,278.93", "$11,294.94")
as.numeric(gsub("[$,]", "", values))
# tagging
values <- c("75.99", "(20.30)", "55.20")
as.numeric(gsub("\\(([0-9.]+)\\)", "-\\1", values))
# extracting the tagged pattern
str <- "report: 17 value=12 time=2:00"
sub("value=([^ ]+)", "\\1", str)
sub("^.*value=([^ ]+).*$", "\\1", str)
geo <- pull(emisiones, 1)
head( str_length(geo), 10)
# to lower
head (str_to_lower(geo), 10)
# data
geo <- pull(emisiones, 1)
# how many characters has every element
head( str_length(geo), 10)
# to lower
head (str_to_lower(geo), 10)
# joining characters
str_c (geo[26 : 35], collapse 11 11 )
# joining characters
str_c (geo[26 : 35], collapse = ",")
# joining characters
str_c (geo[26 : 35], collapse = ", ")
str_c (geo[ 26 : 35], 1:10, sep = " _ " )
str_c (geo[ 26 : 35], 1:10, sep = "_" )
# extracting characters between two indices
str_sub(geo[ 26 : 35], 1, 3)
# str_ and regex
str _subset(geo, "[p] " )
# str_ and regex
str _subset(geo, "[p]" )
# str_ and regex
str _subset(geo, "[p]")
# str_ and regex
str_subset(geo, "[p]")
styler:::style_selection()
str_subset(geo, "[pl]")
str_subset(geo, "AE")
str_subset(geo, "^E")
str_subset(geo, "E$")
# counting
str_count(geo, "[ou]" )
# detecting a pattern
str_detect(geo, "AL" )
# detecting a pattern
str_detect(geo, "AL")
# detecting a pattern
str_detect(geo, "^L")
# extracting a pattern
str_extract(geo, "Euro")
str_extract(geo, "[euro]")
# replacing characters
str_replace(geo, "\\(current composition\\)" , "")
styler:::style_selection()
geo2 <- str_c(geo[26 : 35], 1 :10, sep="_")
geo2
str_replace(geo2, "_[0-9]{1,2}" , "" )
styler:::style_selection()
# creating the format "leading zero"
str_pad( l : 12, 2, "left" , "0" )
styler:::style_selection()
# creating the format "leading zero"
str_pad(1:12, 2, "left", "0")
styler:::style_selection()
names <- c("Irma", "Bea", "Lisa")
ages <- c(5, 59, 36)
sprintf("%s is %s years old.", names, ages)
styler:::style_selection()
data <- c(1, 2, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1)
fdata <- factor(data)
fdata
styler:::style_selection()
rdata <- factor(data, labels = c("I", "II", "III"))
rdata
fdata
rdata
styler:::style_selection()
styler:::style_selection()
levels(fdata) <- c("I", "II", "III")
fdata
fdata
styler:::style_selection()
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
mons <- factor(mons)
table(mons)
# ordered factor
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April", ordered = TRUE)
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April", ordered = TRUE)
mons <- factor(mons)
table(mons)
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
mons <- factor(mons)
table(mons)
styler:::style_selection()
mons <- factor(mons, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"), ordered = TRUE)
mons[1] < mons[2]
table(mons)
# reordering levels
levels(InsectSprays$spray)
styler:::style_selection()
InsectSprays$spray <- with(InsectSprays, reorder(spray, count, mean))
levels(InsectSprays$spray)
attr(InsectSprays$spray, "scores")
# forcing a particular order to a factor with relevel
levels(InsectSprays$spray)
levels(InsectSprays$spray)
InsectSprays$spray2 <- with(InsectSprays, reorder(spray, count, mean))
levels(InsectSprays$spray2)
attr(InsectSprays$spray2, "scores")
# forcing a particular order to a factor with relevel
levels(InsectSprays$spray)
data <- c(1, 2, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1)
fdata <- factor(data)
fdata
# modifying levels in factors
rdata <- factor(data, labels = c("I", "II", "III"))
rdata
levels(fdata) <- c("I", "II", "III")
fdata
# unordered factor
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
mons <- factor(mons)
table(mons)
# ordered factor
mons <- factor(mons, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"), ordered = TRUE)
mons[1] < mons[2]
table(mons)
# reordering levels
levels(InsectSprays$spray)
InsectSprays$spray2 <- with(InsectSprays, reorder(spray, count, mean))
levels(InsectSprays$spray2)
attr(InsectSprays$spray2, "scores")
# forcing a particular order to a factor with relevel
levels(InsectSprays$spray)
data <- c(1, 2, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1)
fdata <- factor(data)
fdata
# modifying levels in factors
rdata <- factor(data, labels = c("I", "II", "III"))
rdata
levels(fdata) <- c("I", "II", "III")
fdata
# unordered factor
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
mons <- factor(mons)
table(mons)
# ordered factor
mons <- factor(mons, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"), ordered = TRUE)
mons[1] < mons[2]
table(mons)
# reordering levels
levels(InsectSprays$spray)
InsectSprays$spray <- with(InsectSprays, reorder(spray, count, mean))
levels(InsectSprays$spray)
attr(InsectSprays$spray, "scores")
# forcing a particular order to a factor with relevel
levels(InsectSprays$spray)
# forcing a particular order to a factor with relevel
levels(InsectSprays$spray)
styler:::style_selection()
levels(InsectSprays$spray)
InsectSprays$spray <- relevel(InsectSprays$spray, "C")
levels(InsectSprays$spray)
levels(InsectSprays$spray)
InsectSprays$spray <- relevel(InsectSprays$spray, "A")
levels(InsectSprays$spray)
styler:::style_selection()
# converting factors to numeric
fert <- c(10, 20, 20, 50, 10, 20, 10, 50, 20)
styler:::style_selection()
fert <- factor(fert, levels = c(10, 20, 50), ordered = TRUE)
fert
styler:::style_selection()
mean(as.numeric(levels(fert)[fert]))
mean(as.numeric(as.character(fert)))
styler:::style_selection()
lets <- sample(letters, size = 100, replace = TRUE)
lets <- factor(lets)
table(lets[1:5])
styler:::style_selection()
table(lets[1:5, drop = TRUE])
# or
table(factor(lets[1:5]))
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
fact1 <- factor(sample(letters, size = 10, replace = TRUE))
fact2 <- factor(sample(letters, size = 10, replace = TRUE))
fact12 <- factor(c(levels(fact1)[fact1], levels(fact2)[fact2]))
fact12
women
styler:::style_selection()
# creating factors from continuous variables
wfact <- cut(women$weight, 3)
table(wfact)
styler:::style_selection()
wfact <- cut(women$weight, pretty(women$weight, 3))
wfact
styler:::style_selection()
styler:::style_selection()
wfact <- cut(women$weight, 3, labels = c("Low", "Medium", "High"))
table(wfact)
styler:::style_selection()
wfact <- cut(women$weight, quantile(women$weight, (0:4) / 4))
table(wfact)
styler:::style_selection()
styler:::style_selection()
# creating factors based on dates and times
everyday <- seq(from = as.Date("2005-1-1"), to = as.Date("2005-12-31"), by = "day")
styler:::style_selection()
cmonth = format(everyday,"%b")
styler:::style_selection()
months <- factor(cmonth, levels = unique(cmonth), ordered = TRUE)
table(months)
styler:::style_selection()
styler:::style_selection()
head(wks)
wks <- cut(everyday, breaks = "week")
head(wks)
head(wks)
styler:::style_selection()
qtrs <- cut(everyday, "3 months", labels = paste("Q", 1:4, sep = ""))
head(qtrs)
styler:::style_selection()
# interactions
newfact <- interaction(CO2$Plant, CO2$Type)
levels(newfact)
nlevels(newfact)
# interactions
nlevels(CO2$Plant()
# interactions
nlevels(CO2$Plant)
# interactions
nlevels(CO2$Plant)
nlevels(CO2$Type)
nlevels(CO2$Plant)
nlevels(CO2$Type)
newfact <- interaction(CO2$Plant, CO2$Type)
nlevels(newfact)
styler:::style_selection()
newfact1 <- interaction(CO2$Plant, CO2$Type, drop = TRUE)
nlevels(newfact1)
levels(newfact1)
newfact1 <- interaction(CO2$Plant, CO2$Type, drop = TRUE, sep = "_")
levels(newfact1)
# Converting multiple numeric variables to factor
cols <- c(35:74)
df.j[, cols] <- lapply(df.j[, cols] , factor)
styler:::style_selection()
btw2009 <- within (btw2009,
levels(stateA) <- c("BW", "BY", "BE",
"BB", "HB", "HH", "HE", "MV", "NI", "NW",
"RP", "SL", "SN", "ST", "SH", "TH"))
# re-assigning ordered levels to variables in a data frame
levels(Arthritis$Improved)
Arthritis$Improved <- ordered(Arthritis$Improved, levels = c("None", "Some", "Marked"))
styler:::style_selection()
styler:::style_selection()
Arthritis$Improved <- ordered(Arthritis$Improved, levels = c("None", "Some", "Marked"))
# or
exp1_long$condition <- factor(exp1_long$condition, levels = c("No_communication", "High_confidence", "Medium_confidence", "Low_confidence"))
styler:::style_selection()
styler:::style_selection()
data <- c(1, 2, 2, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1)
fdata <- factor(data)
fdata
# modifying levels in factors
rdata <- factor(data, labels = c("I", "II", "III"))
rdata
levels(fdata) <- c("I", "II", "III")
fdata
# unordered factor
mons <- c("March", "April", "January", "November", "January", "September", "October", "September", "November", "August", "January", "November", "November", "February", "May", "August", "July", "December", "August", "August", "September", "November", "February", "April")
mons <- factor(mons)
table(mons)
# ordered factor
mons <- factor(mons, levels = c("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"), ordered = TRUE)
mons[1] < mons[2]
table(mons)
# reordering levels
levels(InsectSprays$spray)
InsectSprays$spray <- with(InsectSprays, reorder(spray, count, mean))
levels(InsectSprays$spray)
attr(InsectSprays$spray, "scores")
# forcing a particular order to a factor with relevel
levels(InsectSprays$spray)
InsectSprays$spray <- relevel(InsectSprays$spray, "A")
levels(InsectSprays$spray)
# converting factors to numeric
fert <- c(10, 20, 20, 50, 10, 20, 10, 50, 20)
fert <- factor(fert, levels = c(10, 20, 50), ordered = TRUE)
fert
mean(as.numeric(levels(fert)[fert]))
mean(as.numeric(as.character(fert)))
# dropping unused levels
lets <- sample(letters, size = 100, replace = TRUE)
lets <- factor(lets)
table(lets[1:5])
table(lets[1:5, drop = TRUE])
# or
table(factor(lets[1:5]))
# combining factors
fact1 <- factor(sample(letters, size = 10, replace = TRUE))
fact2 <- factor(sample(letters, size = 10, replace = TRUE))
fact12 <- factor(c(levels(fact1)[fact1], levels(fact2)[fact2]))
fact12
# creating factors from continuous variables
wfact <- cut(women$weight, 3)
table(wfact)
wfact <- cut(women$weight, pretty(women$weight, 3))
wfact
wfact <- cut(women$weight, 3, labels = c("Low", "Medium", "High"))
table(wfact)
wfact <- cut(women$weight, quantile(women$weight, (0:4) / 4))
table(wfact)
# creating factors based on dates and times
everyday <- seq(from = as.Date("2005-1-1"), to = as.Date("2005-12-31"), by = "day")
cmonth <- format(everyday, "%b")
months <- factor(cmonth, levels = unique(cmonth), ordered = TRUE)
table(months)
# with cut
wks <- cut(everyday, breaks = "week")
head(wks)
qtrs <- cut(everyday, "3 months", labels = paste("Q", 1:4, sep = ""))
head(qtrs)
# interactions
nlevels(CO2$Plant)
nlevels(CO2$Type)
newfact <- interaction(CO2$Plant, CO2$Type)
nlevels(newfact)
newfact1 <- interaction(CO2$Plant, CO2$Type, drop = TRUE, sep = "_")
nlevels(newfact1)
levels(newfact1)
# converting multiple numeric variables to factor (no data)
# cols <- c(35:74)
# df.j[, cols] <- lapply(df.j[, cols], factor)
# assigning levels to factor variables (no data)
# btw2009 <- within (btw2009, levels(stateA) <- c("BW", "BY", "BE","BB", "HB", "HH", "HE", "MV", "NI", "NW","RP", "SL", "SN", "ST", "SH", "TH"))
# re-ordering levels and assigning to a new factor variable
# ls <- with(btw9s, Bundesland[order(EW, -Voters)]) # reorder levels and supress one var
# btw9s <- within(btw9s, State1 <- factor(Bundesland, levels=ls)) # create a new factor var and assign levels
# re-assigning ordered levels to variables in a data frame
levels(Arthritis$Improved)
Arthritis$Improved <- ordered(Arthritis$Improved, levels = c("None", "Some", "Marked"))
# or
# exp1_long$condition <- factor(exp1_long$condition, levels = c("No_communication", "High_confidence", "Medium_confidence", "Low_confidence"))
# in table form there are occasions when you need numeric values for the levels of ordered factors in a table (no data)
# Simply re-assign the dimnames attribute of the table variables
# dimnames(JobSat)$income <- c(7.5, 20, 32.5, 60)
# dimnames(JobSat)$satisfaction <- 1:4
# You want to preserve the character labels of table dimensions, but also
# allow them to be sorted in some particular order
# dimnames(JobSat)$income <- paste(1:4, dimnames(JobSat)$income, sep = ":")
# dimnames(JobSat)$satisfaction <- paste(1:4, dimnames(JobSat)$satisfaction, sep = ":")
head(gss_cat)
str(gss_cat$marital)
str(gss_cat$rincome)
styler:::style_selection()
gss_cat <- gss_cat %>%
mutate(marital = fct_recode(marital,
refuse = "No answer",
never_married = "Never married",
divorced = "Separated",
divorced = "Divorced",
widowed = "Widowed",
married = "Married"
))
gss_cat %>%
tabyl(marital)
gss_cat %>%
janitor::tabyl(marital)
styler:::style_selection()
gss_cat <- gss_cat %>%
mutate(marital = fct_lump(marital, prop = 0.10, other_level = "other"))
gss_cat %>%
tabyl(marital)
gss_cat %>%
janitor::tabyl(marital)
styler:::style_selection()
# using fct_reorder()
gss_cat %>%
tabyl(marital) %>%
ggplot() +
geom_col(aes(y = n, x = marital)) +
coord_flip()
styler:::style_selection()
gss_cat %>%
tabyl(marital) %>%
mutate(marital = fct_reorder(marital, n, .desc = FALSE)) %>%
ggplot() +
geom_col(aes(y = n, x = marital)) +
coord_flip()
styler:::style_selection()
styler:::style_selection()
gss_cat %>%
mutate(
# Description of the different functions taken from help(fct_lump)
denom_lowfreq = fct_lump_lowfreq(denom), # lumps together the least frequent levels, ensuring that "other" is still the smallest level.
denom_min = fct_lump_min(denom, min = 10), # lumps levels that appear fewer than min times.
denom_n = fct_lump_n(denom, n = 3), # lumps all levels except for the n most frequent (or least frequent if n < 0)
denom_prop = fct_lump_prop(denom, prop = 0.10) # lumps levels that appear in fewer prop * n times.
)
