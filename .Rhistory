read_csv(csv_files_dir_ls, id = "filename", show_col_types = FALSE) %>%
glimpse
# inconsistent column names
# generating the samples with inconsistent column names
mpg_samples2 <- map(1:10, ~ slice_sample(mpg, n = 20))
inconsistent_dframes <- map(mpg_samples2, ~ janitor::clean_names(dat = .x, case = "random"))
map(inconsistent_dframes, ~ colnames(.x)) %>%
head
# selecting a random set of columns per data frame
inconsistent_dframes <- map(inconsistent_dframes, ~ .x[sample(1:length(.x), sample(1:length(.x), 1))])
map(inconsistent_dframes, ~ colnames(.x)) %>%
head()
# saving to disk
# dir_create(c("input/unclean_files"))
# iwalk(inconsistent_dframes, ~ write_csv(.x, paste0("input/unclean_files/", .y, ".csv")))
# loading and cleaning the data frames
many_columns_data_frame <- dir_ls(path = "input/unclean_files/", glob = "*.csv", type = "file") %>%
map_dfr(~ read_csv(.x, name_repair = tolower, show_col_types = FALSE) %>%
mutate(filename = .x))
# showing results
many_columns_data_frame %>%
glimpse()
# files not in the same folder
mpg_samples3 <- map(1:40, ~ slice_sample(mpg, n = 20))
# Create directories
# dir_create(c("input/nested_folders", "input/nested_folders/first_nested_folder", "input/nested_folders/second_nested_folder"))
# First folder
# iwalk(mpg_samples[1:20], ~ write_csv(.x, paste0("input/nested_folders/first_nested_folder/", .y, "_first.csv")))
# Second folder
# iwalk(mpg_samples[21:40], ~ write_csv(.x, paste0("input/nested_folders/second_nested_folder/", .y, "_second.csv")))
# searching through nested folders recursively
(csv_files_nested <- dir_ls("input/nested_folders/", glob = "*.csv", type = "file", recurse = TRUE))
map_dfr(csv_files_nested, ~ read_csv(.x, show_col_types = FALSE) %>%
mutate(filename = .x)) %>%
glimpse()
# selecting the files to import from a string pattern
csv_files_nested[str_detect(csv_files_nested, pattern = "[2-4]_first|second\\.csv$", negate = TRUE)] %>%
map_dfr(~ read_csv(.x, show_col_types = FALSE) %>%
mutate(filename = .x)) %>%
glimpse()
# write_csv(horas_sol, "output/horas_sol.csv")
# getting data from the web with R-built-in
download.file("http://bit.ly/BostonSnowfallCSV", "input/BostonWinterSnowfalls.csv")
# download.file(“http://bit.ly/BostonSnowfallCSV”, “BostonWinterSnowfalls.csv”, mode=‘wb")
# import data with rio locally
snowdata2 <- rio::import("input/BostonWinterSnowfalls.csv")
suicides <- rio::import("input/PDT-suicidesData.csv")
# rio::import("mySpreadsheet.xlsx", which = 2, col_names = c("City", "State", "Population"))
# getting data from the web with rio
snowdata3 <- rio::import("http://bit.ly/BostonSnowfallCSV", format = "csv")
# getting html tables
design.tokens1 <- rio::import("https://designsystem.digital.gov/design-tokens/", format = "html")
citytable <- htmltab("https://en.wikipedia.org/wiki/List_of_United_States_cities_by_population", which = 5)
design.tokens2 <- htmltab("https://designsystem.digital.gov/design-tokens/", which = 6)
# installing packages from GitHub with pacman
pacman::p_load_gh("smach/rmiscutils")
# changing those character strings that should be numbers back into numbers
citytable$PopEst2021 <- number_with_commas(citytable$`2021estimate`)
citytable$Census2020 <- readr::parse_number(citytable$`2020census`)
# cleaning cols names
citytable_cleaned <- janitor::clean_names(citytable)
names(citytable_cleaned)
# adding cols
snowdata$Meters <- snowdata$Total * 0.0254
# changing col names
names(snowdata) <- c("Winter", "SnowInches", "SnowMeters")
# changing from num to chr
download.file("https://raw.githubusercontent.com/smach/R4JournalismBook/master/data/bostonzips.txt", "input/bostonzips.txt")
zips <- rio::import("input/bostonzips.txt", colClasses = c("character", "character"))
# or
# zips <- rio::import("input/bostonzips.txt", colClasses = rep("character", 2))
# rep("character", 2) is the same as c(“character”, “character”), so colClasses = rep("character", 2) is equivalent to colClasses = c("character", "character")
# write.xlsx(horas_sol, sheetName = "horas_sol", file = "output/horas_sol.xlsx")
mydata <- data.frame(grp1 = c(12, 15, 19, 22, 25), grp2 = c(18, 12, 42, 29, 44), grp3 = c(8, 17, 22, 19, 31))
# reshaping data frame
sdata <- stack(mydata)
sdata
# converting the the original form
mydata <- unstack(sdata, values ~ ind)
mydata
# using reshape
set.seed(17)
obs <- data.frame(subj = rep(1:4, rep(3, 4)), time = rep(1:3), x = rnorm(12), y = rnorm(12))
head(obs)
# from long to wide
wideobs <- reshape(obs, idvar = "subj", v.names = c("x", "y"), timevar = "time", direction = "wide")
head(wideobs)
# from wide to long
obs <- reshape(wideobs)
head(obs)
# from wide to long (complex example)
usp <- data.frame(type = rownames(USPersonalExpenditure), USPersonalExpenditure, row.names = NULL)
head(usp)
rr <- reshape(usp, varying = list(names(usp)[-1]), idvar = "type", times = seq(1940, 1960, by = 5), v.names = "expend", direction = "long")
head(rr)
# an alternative way of reshaping the usp data frame, without having to explicitly provide the values of the times
rr1 <- reshape(usp, varying = names(usp)[-1], idvar = "type", split = list(regexp = "X1", include = TRUE), direction = "long")
head(rr1)
# using melt from reshape package (wide-to-long)
musp = reshape::melt(usp)
# or
# reshape::cast(musp,variable + type ~ .)
head(musp)
# getting rid of "X" and changing type to numeric
musp$variable <- as.numeric(sub("X", "", musp$variable))
# renaming columns
names(musp)[2:3] <- c("time", "expend")
head(musp)
# using cast from reshape package (long-to-wide)
set.seed(999)
obs2 <- data.frame(subj = rep(1:4, rep(3, 4)), time = rep(1:3), x = rnorm(12), y = rnorm(12))
mobs <- reshape::melt(obs2)
# reshape::cast(subj ~ variable + time, data = mobs)
# combining data sets using cbind and rbind
x <- data.frame(a = c("A", "B", "C"), x = c(12, 15, 19))
y <- data.frame(a = c("D", "E", "F", "G"), x = c(19, 21, 14, 12))
intersect(names(x), names(y))
cbind(y, z = c(1, 2))
# combining data sets based on the values of common variables
x <- data.frame(a = c(1, 2, 4, 5, 6), x = c(9, 12, 14, 21, 8))
y <- data.frame(a = c(1, 3, 4, 6), y = c(8, 14, 19, 2))
merge(x, y)
# outer join
merge(x, y, all = TRUE)
# left outer join
merge(x, y, all.x = TRUE)
# right outer join
merge(x, y, all.y = TRUE)
cities <- data.frame(city = c("New York", "Boston", "Juneau", "Anchorage", "San Diego", "Philadelphia", "Los Angeles", "Fairbanks", "Ann Arbor", "Seattle"), state.abb = c("NY", "MA", "AK", "AK", "CA", "PA", "CA", "AK", "MI", "WA"))
states <- data.frame(state.abb = c("NY", "MA", "AK", "CA", "PA", "MI", "WA"), state = c("New York", "Massachusetts", "Alaska", "California", "Pennsylvania", "Michigan", "Washington"))
merge(cities, states)
# wide to long
# where column names are character data
head(relig_income)
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
# columns have common prefix and missing missings are structural so should be dropped
head(billboard)
billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
names_prefix = "wk",
values_to = "rank",
values_drop_na = TRUE
)
# multiple variables stored in column names
head(who)
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
ta_vigo <- read_csv( "input/TG_STAID001395.txt", skip = 20)
head(ta_vigo)
ta_vigo <- mutate(ta_vigo, DATE = lubridate::ymd(DATE), TG = ifelse(TG == -9999, NA, TG / 10)) %>%
filter(DATE >= "1980-01-01", DATE <= "2015-12-31") %>%
select(-STAID:-SOUID, -Q_TG) %>%
rename(date = DATE)
head(ta_vigo)
horas_sol <- read_csv("input/SS_STAID001395.txt", skip = 19)
horas_sol <- mutate(horas_sol, DATE = lubridate::ymd(DATE), SS = ifelse(SS == -9999, NA, SS / 10), month = month(DATE), year = year(DATE))
horas_sol <- rename(horas_sol, date = DATE, sunhours = SS)
horas_sol
data_vigo <- left_join (ta_vigo, horas_sol, by = "date" )
data_vigo
rio::export(data_vigo, file = "data_vigo.csv")
# using separate()
# data_vigo <- rio::import("input/data_vigo.csv")
time_df <- select(data_vigo, date) %>%
separate(date, c("yr", "mo", "dy"), sep = "-") %>%
mutate_all(as.numeric)
head(time_df)
# using case_when()
time_df <- mutate(time_df, season = case_when(
mo %in% c(12, 1:2) ~ "invierno",
mo %in% 3:5 ~ "primavera",
mo %in% 6:8 ~ "verano",
mo %in% 9:11 ~ "otoño"
))
# preparing the data
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
data_vigo_subset <- filter(data_vigo, Variable == "TG") %>%
slice(sample(nrow(data_vigo), 10000)) %>%
arrange(date)
head(data_vigo_subset)
date_ts <- seq(lubridate::ymd("1980-01-01"), lubridate::ymd("2015-12-31"), "day")
# using complete()
data_vigo_subset <- complete(data_vigo_subset, date = date_ts)
head(data_vigo_subset)
gm <- as.data.table(gapminder)
head(gm)
# from long to wide
gmw <- dcast(gm, country + continent ~ year, value.var = c("pop", "lifeExp", "gdpPercap"))
head(gmw)
# wide-to-long (not the best approach!)
gm <- melt(gmw, id.vars = c("country", "continent"), measure.vars = 2:37)
head(gm)
# splitting columns and casting
gm[, c("variable", "year") := tstrsplit(variable, "_", fixed = TRUE)]
gm <- dcast(gm, country + year ~ variable, value.var = c("value"))
head(gm)
# merging columns
aq <- as.data.table(airquality)
head(aq)
# creating a new column Date and mergin Month and Day into it (date format)
aq[, Date := as.Date(paste(1973, aq$Month, aq$Day, sep = "-"))]
head(aq)
rio::export(data_vigo, file = "input/data_vigo.csv")
# ta_vigo <- read_csv( "input/TG_STAID001395.txt", skip = 20)
# head(ta_vigo)
#
# ta_vigo <- mutate(ta_vigo, DATE = lubridate::ymd(DATE), TG = ifelse(TG == -9999, NA, TG / 10)) %>%
#   filter(DATE >= "1980-01-01", DATE <= "2015-12-31") %>%
#   select(-STAID:-SOUID, -Q_TG) %>%
#   rename(date = DATE)
# head(ta_vigo)
#
# horas_sol <- read_csv("input/SS_STAID001395.txt", skip = 19)
# horas_sol <- mutate(horas_sol, DATE = lubridate::ymd(DATE), SS = ifelse(SS == -9999, NA, SS / 10), month = month(DATE), year = year(DATE))
# horas_sol <- rename(horas_sol, date = DATE, sunhours = SS)
# horas_sol
# data_vigo <- left_join (ta_vigo, horas_sol, by = "date" )
# data_vigo
# rio::export(data_vigo, file = "input/data_vigo.csv")
# using separate()
data_vigo <- rio::import("input/data_vigo.csv")
time_df <- select(data_vigo, date) %>%
separate(date, c("yr", "mo", "dy"), sep = "-") %>%
mutate_all(as.numeric)
head(time_df)
# using case_when()
time_df <- mutate(time_df, season = case_when(
mo %in% c(12, 1:2) ~ "invierno",
mo %in% 3:5 ~ "primavera",
mo %in% 6:8 ~ "verano",
mo %in% 9:11 ~ "otoño"
))
# preparing the data
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
# preparing the data
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
# using case_when()
time_df <- mutate(time_df, season = case_when(
mo %in% c(12, 1:2) ~ "invierno",
mo %in% 3:5 ~ "primavera",
mo %in% 6:8 ~ "verano",
mo %in% 9:11 ~ "otoño"
))
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
who
gapminder::who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
# multiple variables stored in column names
head(who)
help(who)
tidyr::who %>%
pivot_longer(
cols = new_sp_m014:newrel_f65,
names_to = c("diagnosis", "gender", "age"),
names_pattern = "new_?(.*)_(.)(.*)",
values_to = "count"
)
# multiple variables stored in column names
head(tidyr::who)
# multiple variables stored in column names
head(tidyr::who)
head(tidyr::who)
ta_vigo <- read_csv( "input/TG_STAID001395.txt", skip = 20)
head(ta_vigo)
ta_vigo <- mutate(ta_vigo, DATE = lubridate::ymd(DATE), TG = ifelse(TG == -9999, NA, TG / 10)) %>%
filter(DATE >= "1980-01-01", DATE <= "2015-12-31") %>%
select(-STAID:-SOUID, -Q_TG) %>%
rename(date = DATE)
head(ta_vigo)
horas_sol <- read_csv("input/SS_STAID001395.txt", skip = 19)
horas_sol <- mutate(horas_sol, DATE = lubridate::ymd(DATE), SS = ifelse(SS == -9999, NA, SS / 10), month = month(DATE), year = year(DATE))
horas_sol <- rename(horas_sol, date = DATE, sunhours = SS)
horas_sol
data_vigo <- left_join (ta_vigo, horas_sol, by = "date" )
data_vigo
rio::export(data_vigo, file = "input/data_vigo.csv")
# using separate()
# data_vigo <- rio::import("input/data_vigo.csv")
time_df <- select(data_vigo, date) %>%
separate(date, c("yr", "mo", "dy"), sep = "-") %>%
mutate_all(as.numeric)
head(time_df)
# using case_when()
time_df <- mutate(time_df, season = case_when(
mo %in% c(12, 1:2) ~ "invierno",
mo %in% 3:5 ~ "primavera",
mo %in% 6:8 ~ "verano",
mo %in% 9:11 ~ "otoño"
))
# preparing the data
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
data_vigo_subset <- filter(data_vigo, Variable == "TG") %>%
slice(sample(nrow(data_vigo), 10000)) %>%
arrange(date)
head(data_vigo_subset)
date_ts <- seq(lubridate::ymd("1980-01-01"), lubridate::ymd("2015-12-31"), "day")
# using complete()
data_vigo_subset <- complete(data_vigo_subset, date = date_ts)
head(data_vigo_subset)
data_vigo
# using separate()
data_vigo <- rio::import("input/data_vigo.csv")
time_df <- select(data_vigo, date) %>%
separate(date, c("yr", "mo", "dy"), sep = "-") %>%
mutate_all(as.numeric)
head(time_df)
# ta_vigo <- read_csv( "input/TG_STAID001395.txt", skip = 20)
# head(ta_vigo)
#
# ta_vigo <- mutate(ta_vigo, DATE = lubridate::ymd(DATE), TG = ifelse(TG == -9999, NA, TG / 10)) %>%
#   filter(DATE >= "1980-01-01", DATE <= "2015-12-31") %>%
#   select(-STAID:-SOUID, -Q_TG) %>%
#   rename(date = DATE)
# head(ta_vigo)
#
# horas_sol <- read_csv("input/SS_STAID001395.txt", skip = 19)
# horas_sol <- mutate(horas_sol, DATE = lubridate::ymd(DATE), SS = ifelse(SS == -9999, NA, SS / 10), month = month(DATE), year = year(DATE))
# horas_sol <- rename(horas_sol, date = DATE, sunhours = SS)
# horas_sol
# data_vigo <- left_join (ta_vigo, horas_sol, by = "date" )
# data_vigo
# rio::export(data_vigo, file = "input/data_vigo.csv")
# using separate()
data_vigo <- rio::import("input/data_vigo.csv")
time_df <- select(data_vigo, date) %>%
separate(date, c("yr", "mo", "dy"), sep = "-") %>%
mutate_all(as.numeric)
head(time_df)
# using case_when()
time_df <- mutate(time_df, season = case_when(
mo %in% c(12, 1:2) ~ "invierno",
mo %in% 3:5 ~ "primavera",
mo %in% 6:8 ~ "verano",
mo %in% 9:11 ~ "otoño"
))
# preparing the data
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
data_vigo_subset <- filter(data_vigo, Variable == "TG") %>%
slice(sample(nrow(data_vigo), 10000)) %>%
arrange(date)
head(data_vigo_subset)
date_ts <- seq(lubridate::ymd("1980-01-01"), lubridate::ymd("2015-12-31"), "day")
# using complete()
data_vigo_subset <- complete(data_vigo_subset, date = date_ts)
# using complete()
data_vigo_subset <- complete(data_vigo_subset, date = date_ts)
ta_vigo <- read_csv( "input/TG_STAID001395.txt", skip = 20)
head(ta_vigo)
ta_vigo <- mutate(ta_vigo, DATE = lubridate::ymd(DATE), TG = ifelse(TG == -9999, NA, TG / 10)) %>%
filter(DATE >= "1980-01-01", DATE <= "2015-12-31") %>%
select(-STAID:-SOUID, -Q_TG) %>%
rename(date = DATE)
head(ta_vigo)
horas_sol <- read_csv("input/SS_STAID001395.txt", skip = 19)
horas_sol <- mutate(horas_sol, DATE = lubridate::ymd(DATE), SS = ifelse(SS == -9999, NA, SS / 10), month = month(DATE), year = year(DATE))
horas_sol <- rename(horas_sol, date = DATE, sunhours = SS)
horas_sol
data_vigo <- left_join (ta_vigo, horas_sol, by = "date" )
data_vigo
rio::export(data_vigo, file = "input/data_vigo.csv")
# using separate()
# data_vigo <- rio::import("input/data_vigo.csv")
time_df <- select(data_vigo, date) %>%
separate(date, c("yr", "mo", "dy"), sep = "-") %>%
mutate_all(as.numeric)
head(time_df)
# using case_when()
time_df <- mutate(time_df, season = case_when(
mo %in% c(12, 1:2) ~ "invierno",
mo %in% 3:5 ~ "primavera",
mo %in% 6:8 ~ "verano",
mo %in% 9:11 ~ "otoño"
))
# preparing the data
data_vigo <- gather(data_vigo, Variable, Valor, TG:sunhours)
data_vigo_subset <- filter(data_vigo, Variable == "TG") %>%
slice(sample(nrow(data_vigo), 10000)) %>%
arrange(date)
head(data_vigo_subset)
date_ts <- seq(lubridate::ymd("1980-01-01"), lubridate::ymd("2015-12-31"), "day")
# using complete()
data_vigo_subset <- complete(data_vigo_subset, date = date_ts)
head(data_vigo_subset)
snowdata <- rio::import("input/BostonChicagoNYCSnowfalls.csv")
# knowing how may rows
snowdata[nrow(snowdata), ]
# using filter from dplyr
filter(snowdata, "Boston" > 100)
# OR
filter(snowdata, "Boston" < 20 | "Boston" > 100)
# using filter from dplyr
filter(snowdata, Boston > 100)
# OR
filter(snowdata, Boston < 20 | Boston > 100)
# AND
filter(snowdata, Boston > 40 & Boston < 50)
filter(snowdata, Boston > 50, Boston < 80)
# using slice()
myresults <- slice(snowdata, 60:76)
myresults
# arranging data frames
arrange(snowdata)
# arranging data frames
arrange(snowdata, Boston)
# descencing order
arrange(snowdata, desc(Boston))
# by a second column
arrange(snowdata, Boston, NYC)
# selcting columns
select(snowdata, Winter, Boston)
select(snowdata, Boston:NYC)
select(snowdata, ends_with("_NY"))
select(snowdata, ends_with("_C"))
select(snowdata, contains("_C"))
select(snowdata, contains("C"))
select(snowdata, ends_with("C"))
select(snowdata, -ends_with("C"))
snowdata_numeric <- select_if(snowdata, is.numeric)
psych::describe(snowdata_numeric)
styler:::style_selection()
# tidyselect
mpg %>%
select(everything()) %>%
glimpse()
styler:::style_selection()
# tidyselect
# relocating columns with everything()
mpg %>%
select(manufacturer, cyl, everything()) %>%
glimpse()
styler:::style_selection()
# selecting the last column
mpg %>%
select(last_col()) %>%
glimpse()
styler:::style_selection()
styler:::style_selection()
# you can use last_col to select the n-to-last column
mpg %>%
select(last_col(1)) %>%
glimpse()
styler:::style_selection()
mpg %>%
select(starts_with("m")) %>%
glimpse()
styler:::style_selection()
mpg %>%
select(ends_with(c("l", "r"))) %>%
glimpse()
styler:::style_selection()
mpg %>%
select(contains("m")) %>%
glimpse()
styler:::style_selection()
mpg %>%
rename(Manufacturer = manufacturer) %>%
select(contains("m", ignore.case = FALSE)) %>%
glimpse()
styler:::style_selection()
billboard %>%
select(matches("\\d")) %>%
colnames()
styler:::style_selection()
billboard %>%
select(matches("wk\\d{1}$")) %>%
colnames()
styler:::style_selection()
anscombe %>%
select(matches("[xy][1-2]")) %>%
glimpse()
styler:::style_selection()
# selecting columns with number ranges
anscombe %>%
select(num_range("x", 1:2)) %>%
glimpse()
styler:::style_selection()
billboard %>%
select(num_range("wk", 1:15)) %>%
glimpse()
styler:::style_selection()
# selecting columns of a specific type
billboard %>%
select(where(is.character)) %>%
glimpse()
styler:::style_selection()
# combining selections
mpg %>%
select(where(is.character) & contains("l")) %>%
glimpse()
mpg %>% select(where(is.character) | contains("l")) %>%
glimpse()
styler:::style_selection()
