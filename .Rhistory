mean(as.numeric(as.character(fert)))
# dropping unused levels
lets <- sample(letters, size = 100, replace = TRUE)
lets <- factor(lets)
table(lets[1:5])
table(lets[1:5, drop = TRUE])
# or
table(factor(lets[1:5]))
# combining factors
fact1 <- factor(sample(letters, size = 10, replace = TRUE))
fact2 <- factor(sample(letters, size = 10, replace = TRUE))
fact12 <- factor(c(levels(fact1)[fact1], levels(fact2)[fact2]))
fact12
# creating factors from continuous variables
wfact <- cut(women$weight, 3)
table(wfact)
wfact <- cut(women$weight, pretty(women$weight, 3))
wfact
wfact <- cut(women$weight, 3, labels = c("Low", "Medium", "High"))
table(wfact)
wfact <- cut(women$weight, quantile(women$weight, (0:4) / 4))
table(wfact)
# creating factors based on dates and times
everyday <- seq(from = as.Date("2005-1-1"), to = as.Date("2005-12-31"), by = "day")
cmonth <- format(everyday, "%b")
months <- factor(cmonth, levels = unique(cmonth), ordered = TRUE)
table(months)
# with cut
wks <- cut(everyday, breaks = "week")
head(wks)
qtrs <- cut(everyday, "3 months", labels = paste("Q", 1:4, sep = ""))
head(qtrs)
# interactions
nlevels(CO2$Plant)
nlevels(CO2$Type)
newfact <- interaction(CO2$Plant, CO2$Type)
nlevels(newfact)
newfact1 <- interaction(CO2$Plant, CO2$Type, drop = TRUE, sep = "_")
nlevels(newfact1)
levels(newfact1)
# converting multiple numeric variables to factor (no data)
# cols <- c(35:74)
# df.j[, cols] <- lapply(df.j[, cols], factor)
# assigning levels to factor variables (no data)
# btw2009 <- within (btw2009, levels(stateA) <- c("BW", "BY", "BE","BB", "HB", "HH", "HE", "MV", "NI", "NW","RP", "SL", "SN", "ST", "SH", "TH"))
# re-ordering levels and assigning to a new factor variable
# ls <- with(btw9s, Bundesland[order(EW, -Voters)]) # reorder levels and supress one var
# btw9s <- within(btw9s, State1 <- factor(Bundesland, levels=ls)) # create a new factor var and assign levels
# re-assigning ordered levels to variables in a data frame
levels(Arthritis$Improved)
Arthritis$Improved <- ordered(Arthritis$Improved, levels = c("None", "Some", "Marked"))
# or
# exp1_long$condition <- factor(exp1_long$condition, levels = c("No_communication", "High_confidence", "Medium_confidence", "Low_confidence"))
# in table form there are occasions when you need numeric values for the levels of ordered factors in a table (no data)
# Simply re-assign the dimnames attribute of the table variables
# dimnames(JobSat)$income <- c(7.5, 20, 32.5, 60)
# dimnames(JobSat)$satisfaction <- 1:4
# You want to preserve the character labels of table dimensions, but also
# allow them to be sorted in some particular order
# dimnames(JobSat)$income <- paste(1:4, dimnames(JobSat)$income, sep = ":")
# dimnames(JobSat)$satisfaction <- paste(1:4, dimnames(JobSat)$satisfaction, sep = ":")
head(gss_cat)
str(gss_cat$marital)
str(gss_cat$rincome)
# recoding levels
gss_cat <- gss_cat %>%
mutate(marital = fct_recode(marital,
refuse = "No answer",
never_married = "Never married",
divorced = "Separated",
divorced = "Divorced",
widowed = "Widowed",
married = "Married"
))
gss_cat %>%
janitor::tabyl(marital)
# lumping categories
gss_cat <- gss_cat %>%
mutate(marital = fct_lump(marital, prop = 0.10, other_level = "other"))
gss_cat %>%
mutate(
# Description of the different functions taken from help(fct_lump)
denom_lowfreq = fct_lump_lowfreq(denom), # lumps together the least frequent levels, ensuring that "other" is still the smallest level.
denom_min = fct_lump_min(denom, min = 10), # lumps levels that appear fewer than min times.
denom_n = fct_lump_n(denom, n = 3), # lumps all levels except for the n most frequent (or least frequent if n < 0)
denom_prop = fct_lump_prop(denom, prop = 0.10) # lumps levels that appear in fewer prop * n times.
)
gss_cat %>%
tabyl(marital)
# using fct_reorder()
gss_cat %>%
tabyl(marital) %>%
ggplot() +
geom_col(aes(y = n, x = marital)) +
coord_flip()
gss_cat %>%
tabyl(marital) %>%
mutate(marital = fct_reorder(marital, n, .desc = FALSE)) %>%
ggplot() +
geom_col(aes(y = n, x = marital)) +
coord_flip()
# lintr::lint("main.Rmd", linters =
#               lintr::with_defaults(
#                 commented_code_linter = NULL,
#                 trailing_whitespace_linter = NULL
#                 )
#             )
# if you have additional scripts and want them to be linted too, add them here
# lintr::lint("scripts/my_script.R")
styler:::style_selection()
as.Date("1915-6-16")
as.Date("1990/02/17")
styler:::style_selection()
styler:::style_selection()
# using as.Date
as.Date("1915-6-16")
as.Date("1990/02/17")
as.Date("1/15/2001", format = "%m/%d/%Y")
as.Date("April 26, 2001", format = "%B %d, %Y")
as.Date("22JUN01", format = "%d%b%y")
styler:::style_selection()
thedate <- as.Date("1/15/2001", format = "%m/%d/%Y")
ndate <- as.numeric(thedate)
ndate
class(ndate) <- "Date"
ndate
ndate
ndate
# converting date to numeric and viceverse
thedate <- as.Date("1/15/2001", format = "%m/%d/%Y")
ndate <- as.numeric(thedate)
ndate
class(ndate) <- "Date"
ndate
install.packages("chron")
library(chron)
styler:::style_selection()
dtimes <- c("2002-06-09 12:45:40", "2003-01-29 09:30:40", "2002-09-04 16:45:40", "2002-11-13 20:00:40", "2002-07-07 17:30:40")
dtparts <- t(as.data.frame(strsplit(dtimes, " ")))
row.names(dtparts) <- NULL
thetimes <- chron(dates = dtparts[, 1], times = dtparts[, 2], format = c("y-m-d", "h:m:s"))
thetimes
dtparts
row.names(dtparts) <- NULL
dtparts
row.names(dtparts) <- NULL
row.names(dtparts) <- NULL
styler:::style_selection()
dts <- c("2005-10-21 18:47:22", "2005-12-24 16:39:58", "2005-10-28 07:30:05 PDT")
as.POSIXlt(dts)
styler:::style_selection()
dts <- c(1127056501, 1104295502, 1129233601, 1113547501, 1119826801, 1132519502, 1125298801, 1113289201)
mydates <- dts
class(mydates) <- c("POSIXt", "POSIXct")
mydates
styler:::style_selection()
styler:::style_selection()
# using strptime
mydate <- strptime("16/Oct/2005:07:51:00", format = "%d/%b/%Y:%H:%M:%S")
mydate
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
mydates <- c("20060515 112504.5", "20060518 101000.3", "20060520 20035.1")
dtparts <- t(as.data.frame(strsplit(mydates, " ")))
dtimes <- strptime(dtparts[, 1], format = "%Y%m%d")
as.numeric(dtparts[, 2])
dtimes
styler:::style_selection()
# using ISOdate
ISOdate(2006, 5, 16, 7, 15, 04, tz = "PDT")
styler:::style_selection()
thedate <- ISOdate(2005, 10, 21, 18, 47, 22, tz = "PDT")
format(thedate, "%A, %B %d, %Y %H:%M:%S")
styler:::style_selection()
mydate <- as.POSIXlt("2005-4-19 7:01:00")
names(mydate)
mydate$day
mydate$mday
names(mydate)
mydate <- as.POSIXlt("2005-4-19 7:01:00")
names(mydate)
mydate$mday
names(mydate)
mydate <- as.POSIXlt("2005-4-19 7:01:00")
names(mydate)
mydate$mday
names(mydate)
colnames(mydate)
mydate
str(mydate)
class(mydate)
help(names)
names(mydate)
names(simple)
rdates = scan(what="")
rdates = as.data.frame(matrix(rdates,ncol=2,byrow=TRUE))
rdates
rdates = scan(what="")
rdates = as.data.frame(matrix(rdates,ncol=2,byrow=TRUE))
rdates
styler:::style_selection()
rdates <- scan(what = "")
rdates <- as.data.frame(matrix(rdates, ncol = 2, byrow = TRUE))
rdates
styler:::style_selection()
b1 <- ISOdate(1977, 7, 13)
b2 <- ISOdate(2003, 8, 14)
b2 - b1
range(b1)
mean(b1)
styler:::style_selection()
difftime(b2, b1, units = "weeks")
styler:::style_selection()
ydiff <- (b2 - b1) / 365.25
ydiff
styler:::style_selection()
attr(ydiff, "units") <- "years"
ydiff
styler:::style_selection()
# time sequences
seq(as.Date("1976-7-4"), by = "days", length = 10)
styler:::style_selection()
seq(as.Date("2000-6-1"), to = as.Date("2000-8-1"), by = "2 weeks")
styler:::style_selection()
table(format(rdates$Date, "%A"))
names(thetimes)
thetimes
ndate
elecdaily2 <- as.data.frame(elecdaily)
styler:::style_selection()
what
which()
version
help(version)
version$year
version$date
version$month
scan(what = "")
scan(what = "")
styler:::style_selection()
rdates <- scan(what = "")
rdates
rdates
rdates <- scan(what = "")
rdatees
rdates
rdates <- scan(what = "")
rdates
rdates
styler:::style_selection()
rdates <- as.data.frame(matrix(rdates, ncol = 2, byrow = TRUE))
rdates[, 2] <- as.Date(rdates[, 2], format = "%d%b%Y")
names(rdates) <- c("Release", "Date")
rdates
mean(rdates$Date)
range(rdates$Date)
rdates$Date[11] - rdates$Date[1]
# extracting parts of dates (no data)
table(format(rdates$Date, "%A"))
# converting dates to factors
fdate <- factor(format(rdates$Date, "%Y"))
fdate
# rdates <- scan(what = "")
# rdates
export(rdates, format = "rdates.csv")
# rdates <- scan(what = "")
# rdates
export(rdates, format = "csv")
# rdates <- scan(what = "")
# rdates
# export(rdates, format = "csv")
import("input/rdates.csv")
# using as.Date
as.Date("1915-6-16")
as.Date("1990/02/17")
as.Date("1/15/2001", format = "%m/%d/%Y")
as.Date("April 26, 2001", format = "%B %d, %Y")
as.Date("22JUN01", format = "%d%b%y")
# converting date to numeric and back to date
thedate <- as.Date("1/15/2001", format = "%m/%d/%Y")
ndate <- as.numeric(thedate)
ndate
class(ndate) <- "Date"
ndate
# using chron
dtimes <- c("2002-06-09 12:45:40", "2003-01-29 09:30:40", "2002-09-04 16:45:40", "2002-11-13 20:00:40", "2002-07-07 17:30:40")
dtparts <- t(as.data.frame(strsplit(dtimes, " ")))
row.names(dtparts) <- NULL
thetimes <- chron(dates = dtparts[, 1], times = dtparts[, 2], format = c("y-m-d", "h:m:s"))
thetimes
# using POSIXlt
dts <- c("2005-10-21 18:47:22", "2005-12-24 16:39:58", "2005-10-28 07:30:05 PDT")
as.POSIXlt(dts)
# using POSIXct
dts <- c(1127056501, 1104295502, 1129233601, 1113547501, 1119826801, 1132519502, 1125298801, 1113289201)
mydates <- dts
class(mydates) <- c("POSIXt", "POSIXct")
mydates
# or
# mydates <- structure(dts, class = c("POSIXt", "POSIXct"))
# using strptime
mydate <- strptime("16/Oct/2005:07:51:00", format = "%d/%b/%Y:%H:%M:%S")
mydate
# transforming times that are not represented by a formatted version
mydates <- c("20060515 112504.5", "20060518 101000.3", "20060520 20035.1")
dtparts <- t(as.data.frame(strsplit(mydates, " ")))
dtimes <- strptime(dtparts[, 1], format = "%Y%m%d")
as.numeric(dtparts[, 2])
dtimes
# using ISOdate
ISOdate(2006, 5, 16, 7, 15, 04, tz = "PDT")
# formatting dates for output
thedate <- ISOdate(2005, 10, 21, 18, 47, 22, tz = "PDT")
format(thedate, "%A, %B %d, %Y %H:%M:%S")
# extracting components of POSIX
mydate <- as.POSIXlt("2005-4-19 7:01:00")
names(mydate)
mydate$mday
# operations with dates
b1 <- ISOdate(1977, 7, 13)
b2 <- ISOdate(2003, 8, 14)
b2 - b1
difftime(b2, b1, units = "weeks")
# rdates <- scan(what = "")
# rdates
# export(rdates, format = "csv")
import("input/rdates.csv")
rdates <- as.data.frame(matrix(rdates, ncol = 2, byrow = TRUE))
rdates[, 2] <- as.Date(rdates[, 2], format = "%d%b%Y")
rdates
names(rdates)
rdates$V2 <- as.Date(rdates$V2, format = "%d%b%Y")
rdates
example(save)
rdates <- scan(what = "")
save(rdates, file = "input/rdates.RData")
load("input/rdates.RData")
rdates
str(rdates)
class(rdates)
rdates <- as.data.frame(matrix(rdates, ncol = 2, byrow = TRUE))
rdates[, 2] <- as.Date(rdates[, 2], format = "%d%b%Y")
names(rdates) <- c("Release", "Date")
rdates
mean(rdates$Date)
range(rdates$Date)
rdates$Date[11] - rdates$Date[1]
# converting dates to factors
fdate <- factor(format(rdates$Date, "%Y"))
fdate
# extracting parts of dates
table(format(rdates$Date, "%A"))
unloadNamespace("Hmisc")
independence <- readRDS("input/independence.rds")
head(independence)
names(independence)
styler:::style_selection()
independence <- independence %>%
mutate(independence_date = dmy(independence_date))
independence <- independence %>%
mutate(independence_date = lubridate::dmy(independence_date))
str(independence)
independence %>%
filter(year(independence_date) <= 1960) %>%
pull(country)
independence %>%
filter(month(independence_date) == 12,
day(independence_date) == 24) %>%
pull(country)
independence %>%
filter(lubridate::month(independence_date) == 12,
lubridate::day(independence_date) == 24) %>%
pull(country)
independence %>%
mutate(today = lubridate::today()) %>%
mutate(independent_since = lubridate::interval(independence_date, today)) %>%
select(country, independent_since)
independence %>%
mutate(today = lubridate::today()) %>%
mutate(independent_since = interval(independence_date, today)) %>%
select(country, independent_since) %>%
mutate(years_independent = as.numeric(independent_since, "years"))
independence %>%
mutate(today = lubridate::today()) %>%
mutate(independent_since = lubridate::interval(independence_date, today)) %>%
select(country, independent_since) %>%
mutate(years_independent = as.numeric(independent_since, "years"))
independence %>%
filter(colonial_power %in% c("Belgium", "France", "Portugal", "United Kingdom")) %>%
mutate(today = lubridate::today()) %>%
mutate(independent_since = lubridate::interval(independence_date, today)) %>%
mutate(years_independent = as.numeric(independent_since, "years")) %>%
group_by(colonial_power) %>%
summarise(last_colony_independent_for = min(years_independent, na.rm = TRUE))
independence %>%
filter(colonial_power %in% c("Belgium", "France", "Portugal", "United Kingdom")) %>%
mutate(today = lubridate::today()) %>%
mutate(independent_since = lubridate::interval(independence_date, today)) %>%
mutate(years_independent = as.numeric(independent_since, "years")) %>%
group_by(colonial_power) %>%
summarise(last_colony_independent_for = min(years_independent, na.rm = TRUE))
independence %>%
filter(colonial_power %in% c("Belgium", "France", "Portugal", "United Kingdom")) %>%
mutate(today = lubridate::today()) %>%
mutate(independent_since = lubridate::interval(independence_date, today)) %>%
mutate(years_independent = as.numeric(independent_since, "years")) %>%
group_by(colonial_power) %>%
dplyr::summarise(last_colony_independent_for = min(years_independent, na.rm = TRUE))
# arithmetic with dates
ymd("2018-12-31") + 16
# arithmetic with dates
lubridate::ymd("2018-12-31") + 16
lubridate::ymd("2018-12-31") + days(16)
lubridate::ymd("2018-12-31") + lubridate::days(16)
lubridate::ymd("2018-12-31") + years(1)
lubridate::ymd("2018-12-31") + lubridate::years(1)
# leap years
ymd("2016-02-29") + years(1)
# leap years
lubridate::ymd("2016-02-29") + lubridate:.years(1)
# leap years
lubridate::ymd("2016-02-29") + lubridate::years(1)
lubridate::ymd("2016-02-29") %m+% lubridate::years(1)
ymd("2016-02-29") %m+% years(1)
lubridate::ymd("2016-02-29") %m+% lubridate::years(1)
library(lubridate)
lubridate::ymd("2016-02-29") %m+% lubridate::years(1)
ymd("2018-12-31") %m+% months(2)
lubridate::ymd("2018-12-31") %m+% lubridate::months(2)
lubridate::ymd("2018-12-31") %m+% lubridate::months(2)
lubridate::ymd("2016-02-29") %m+% lubridate::years(1)
lubridate::ymd("2018-12-31") %m+% lubridate::months(2)
lubridate::ymd("2018-12-31") %m+% lubridate::months(2)
ymd("2018-12-31") %m+% months(2)
styler:::style_selection()
fechas <- c("1999/12/31", "2000/01/07", "2005/05/20", "2010/03/25")
fechas<- ymd (fechas)
styler:::style_selection()
fechas
class(fechas)
# extracting months
month(fechas)
# extracting years
year(fechas)
month(fechas, label = TRUE)
# weekdays
wday(fechas)
wday(fechas, label = TRUE)
# week
week(fechas)
# semester
semester(fechas)
styler:::style_selection()
# changing system defaults
sys_time_old <- Sys.getlocale("LC_TIME")
styler:::style_selection()
Sys.setlocale("LC_TIME", "Spanish")
sys_time_old
month(fechas)
month(fechas, label = TRUE)
Sys.setlocale()
help("Sys.setlocale")
Sys.setlocale("LC_TIME", "Spanish.UTF-8")
month(fechas, label = TRUE)
month(fechas, label = TRUE)
Sys.setlocale("LC_TIME", "sp")
month(fechas, label = TRUE)
panish.UTF-8
sys_time_old <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "Spanish.UTF-8")
month(fechas, label = TRUE)
month(fechas, label = TRUE)
Sys.setlocale( "LC_TIME" , sys_time_old)
Sys.setlocale("LC_TIME", "Spanish.UTF-8")
styler:::style_selection()
Sys.setlocale("LC_TIME", sys_time_old)
# figuring out differencs between dates
lubridate::diff(fechas)
# figuring out differencs between dates
diff(fechas)
styler:::style_selection()
difftime(fechas[3], fechas[l], units = "weeks")
difftime(fechas[3], fechas[1], units = "weeks")
seq(fechas[ l ], fechas[ 2], "day" )
styler:::style_selection()
seq(fechas[1], fechas[2], "day")
# sequence
seq(fechas[1], fechas[2], "day")
styler:::style_selection()
seq(fechas[1], fechas[3], "year")
styler:::style_selection()
round_date(fechas, "month")
round_date(fechas, "year")
styler:::style_selection()
styler:::style_selection()
llegada <- ymd_hms("2011-06-04 12:25:00", tz = "Europe/Berlin")
llegada
styler:::style_selection()
llegada <- ymd_hms("2011-06-04 12:25:00", tz = "Europe/Berlin")
salida <- ymd_hms("2011-06-05 14:45:00", tz = "Europe/Berlin")
llegada
salida
minute(llegada)
styler:::style_selection()
styler:::style_selection()
with_tz(llegada, "America/Santiago")
styler:::style_selection()
styler:::style_selection()
df_month <- data.frame(month = 1:12, year = 2000, ta = rnorm(12, 15, 2))
styler:::style_selection()
mutate(df_month, date = make_date(year, month))
